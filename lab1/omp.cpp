// Header inclusions, if any...

#include "lib/gemm.h"

// Using declarations, if any...

void GemmParallel(const float a[kI][kK], const float b[kK][kJ],
                  float c[kI][kJ]) {
  // this epic performance brought to you by unroll and jam
  #pragma omp parallel for
  for (int i = 0; i < kI; i += 4) {
    for (int k = 0; k < kI; k += 8) {
      for (int j = 0; j < kJ; j += 4) {
        c[i+0][j+0] += a[i+0][k+0] * b[k+0][j+0] + a[i+0][k+1] * b[k+1][j+0] + a[i+0][k+2] * b[k+2][j+0] + a[i+0][k+3] * b[k+3][j+0] + a[i+0][k+4] * b[k+4][j+0] + a[i+0][k+5] * b[k+5][j+0] + a[i+0][k+6] * b[k+6][j+0] + a[i+0][k+7] * b[k+7][j+0];
        c[i+0][j+1] += a[i+0][k+0] * b[k+0][j+1] + a[i+0][k+1] * b[k+1][j+1] + a[i+0][k+2] * b[k+2][j+1] + a[i+0][k+3] * b[k+3][j+1] + a[i+0][k+4] * b[k+4][j+1] + a[i+0][k+5] * b[k+5][j+1] + a[i+0][k+6] * b[k+6][j+1] + a[i+0][k+7] * b[k+7][j+1];
        c[i+0][j+2] += a[i+0][k+0] * b[k+0][j+2] + a[i+0][k+1] * b[k+1][j+2] + a[i+0][k+2] * b[k+2][j+2] + a[i+0][k+3] * b[k+3][j+2] + a[i+0][k+4] * b[k+4][j+2] + a[i+0][k+5] * b[k+5][j+2] + a[i+0][k+6] * b[k+6][j+2] + a[i+0][k+7] * b[k+7][j+2];
        c[i+0][j+3] += a[i+0][k+0] * b[k+0][j+3] + a[i+0][k+1] * b[k+1][j+3] + a[i+0][k+2] * b[k+2][j+3] + a[i+0][k+3] * b[k+3][j+3] + a[i+0][k+4] * b[k+4][j+3] + a[i+0][k+5] * b[k+5][j+3] + a[i+0][k+6] * b[k+6][j+3] + a[i+0][k+7] * b[k+7][j+3];
        c[i+1][j+0] += a[i+1][k+0] * b[k+0][j+0] + a[i+1][k+1] * b[k+1][j+0] + a[i+1][k+2] * b[k+2][j+0] + a[i+1][k+3] * b[k+3][j+0] + a[i+1][k+4] * b[k+4][j+0] + a[i+1][k+5] * b[k+5][j+0] + a[i+1][k+6] * b[k+6][j+0] + a[i+1][k+7] * b[k+7][j+0];
        c[i+1][j+1] += a[i+1][k+0] * b[k+0][j+1] + a[i+1][k+1] * b[k+1][j+1] + a[i+1][k+2] * b[k+2][j+1] + a[i+1][k+3] * b[k+3][j+1] + a[i+1][k+4] * b[k+4][j+1] + a[i+1][k+5] * b[k+5][j+1] + a[i+1][k+6] * b[k+6][j+1] + a[i+1][k+7] * b[k+7][j+1];
        c[i+1][j+2] += a[i+1][k+0] * b[k+0][j+2] + a[i+1][k+1] * b[k+1][j+2] + a[i+1][k+2] * b[k+2][j+2] + a[i+1][k+3] * b[k+3][j+2] + a[i+1][k+4] * b[k+4][j+2] + a[i+1][k+5] * b[k+5][j+2] + a[i+1][k+6] * b[k+6][j+2] + a[i+1][k+7] * b[k+7][j+2];
        c[i+1][j+3] += a[i+1][k+0] * b[k+0][j+3] + a[i+1][k+1] * b[k+1][j+3] + a[i+1][k+2] * b[k+2][j+3] + a[i+1][k+3] * b[k+3][j+3] + a[i+1][k+4] * b[k+4][j+3] + a[i+1][k+5] * b[k+5][j+3] + a[i+1][k+6] * b[k+6][j+3] + a[i+1][k+7] * b[k+7][j+3];
        c[i+2][j+0] += a[i+2][k+0] * b[k+0][j+0] + a[i+2][k+1] * b[k+1][j+0] + a[i+2][k+2] * b[k+2][j+0] + a[i+2][k+3] * b[k+3][j+0] + a[i+2][k+4] * b[k+4][j+0] + a[i+2][k+5] * b[k+5][j+0] + a[i+2][k+6] * b[k+6][j+0] + a[i+2][k+7] * b[k+7][j+0];
        c[i+2][j+1] += a[i+2][k+0] * b[k+0][j+1] + a[i+2][k+1] * b[k+1][j+1] + a[i+2][k+2] * b[k+2][j+1] + a[i+2][k+3] * b[k+3][j+1] + a[i+2][k+4] * b[k+4][j+1] + a[i+2][k+5] * b[k+5][j+1] + a[i+2][k+6] * b[k+6][j+1] + a[i+2][k+7] * b[k+7][j+1];
        c[i+2][j+2] += a[i+2][k+0] * b[k+0][j+2] + a[i+2][k+1] * b[k+1][j+2] + a[i+2][k+2] * b[k+2][j+2] + a[i+2][k+3] * b[k+3][j+2] + a[i+2][k+4] * b[k+4][j+2] + a[i+2][k+5] * b[k+5][j+2] + a[i+2][k+6] * b[k+6][j+2] + a[i+2][k+7] * b[k+7][j+2];
        c[i+2][j+3] += a[i+2][k+0] * b[k+0][j+3] + a[i+2][k+1] * b[k+1][j+3] + a[i+2][k+2] * b[k+2][j+3] + a[i+2][k+3] * b[k+3][j+3] + a[i+2][k+4] * b[k+4][j+3] + a[i+2][k+5] * b[k+5][j+3] + a[i+2][k+6] * b[k+6][j+3] + a[i+2][k+7] * b[k+7][j+3];
        c[i+3][j+0] += a[i+3][k+0] * b[k+0][j+0] + a[i+3][k+1] * b[k+1][j+0] + a[i+3][k+2] * b[k+2][j+0] + a[i+3][k+3] * b[k+3][j+0] + a[i+3][k+4] * b[k+4][j+0] + a[i+3][k+5] * b[k+5][j+0] + a[i+3][k+6] * b[k+6][j+0] + a[i+3][k+7] * b[k+7][j+0];
        c[i+3][j+1] += a[i+3][k+0] * b[k+0][j+1] + a[i+3][k+1] * b[k+1][j+1] + a[i+3][k+2] * b[k+2][j+1] + a[i+3][k+3] * b[k+3][j+1] + a[i+3][k+4] * b[k+4][j+1] + a[i+3][k+5] * b[k+5][j+1] + a[i+3][k+6] * b[k+6][j+1] + a[i+3][k+7] * b[k+7][j+1];
        c[i+3][j+2] += a[i+3][k+0] * b[k+0][j+2] + a[i+3][k+1] * b[k+1][j+2] + a[i+3][k+2] * b[k+2][j+2] + a[i+3][k+3] * b[k+3][j+2] + a[i+3][k+4] * b[k+4][j+2] + a[i+3][k+5] * b[k+5][j+2] + a[i+3][k+6] * b[k+6][j+2] + a[i+3][k+7] * b[k+7][j+2];
        c[i+3][j+3] += a[i+3][k+0] * b[k+0][j+3] + a[i+3][k+1] * b[k+1][j+3] + a[i+3][k+2] * b[k+2][j+3] + a[i+3][k+3] * b[k+3][j+3] + a[i+3][k+4] * b[k+4][j+3] + a[i+3][k+5] * b[k+5][j+3] + a[i+3][k+6] * b[k+6][j+3] + a[i+3][k+7] * b[k+7][j+3];
      }
    }
  }
}
