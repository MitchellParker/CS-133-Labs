diff --git a/lab1/lib/gemm.cpp b/lab1/lib/gemm.cpp
index 9e77596..c7aa2a5 100644
--- a/lab1/lib/gemm.cpp
+++ b/lab1/lib/gemm.cpp
@@ -15,28 +15,28 @@ using std::clog;
 using std::endl;
 using std::vector;
 
-void GemmBaseline(const vector<vector<float>>& a,
-                  const vector<vector<float>>& b,
-                  vector<vector<float>>* c);
-void GemmBaseline(const float a[kI][kK], const float b[kK][kJ],
-                  float c[kI][kJ]) {
-  vector<vector<float>> a_vec(kI);
-  vector<vector<float>> b_vec(kK);
-  vector<vector<float>> c_vec(kI);
-  for (int i = 0; i < kI; ++i) {
-    a_vec[i].resize(kK);
-    c_vec[i].resize(kJ);
-    std::memcpy(a_vec[i].data(), a[i], sizeof(float) * kK);
-  }
-  for (int k = 0; k < kK; ++k) {
-    b_vec[k].resize(kJ);
-    std::memcpy(b_vec[k].data(), b[k], sizeof(float) * kJ);
-  }
-  GemmBaseline(a_vec, b_vec, &c_vec);
-  for (int i = 0; i < kI; ++i) {
-    std::memcpy(c[i], c_vec[i].data(), sizeof(float) * kJ);
-  }
-}
+//void GemmBaseline(const vector<vector<float>>& a,
+//                  const vector<vector<float>>& b,
+//                  vector<vector<float>>* c);
+//void GemmBaseline(const float a[kI][kK], const float b[kK][kJ],
+//                  float c[kI][kJ]) {
+//  vector<vector<float>> a_vec(kI);
+//  vector<vector<float>> b_vec(kK);
+//  vector<vector<float>> c_vec(kI);
+//  for (int i = 0; i < kI; ++i) {
+//    a_vec[i].resize(kK);
+//    c_vec[i].resize(kJ);
+//    std::memcpy(a_vec[i].data(), a[i], sizeof(float) * kK);
+//  }
+//  for (int k = 0; k < kK; ++k) {
+//    b_vec[k].resize(kJ);
+//    std::memcpy(b_vec[k].data(), b[k], sizeof(float) * kJ);
+//  }
+//  GemmBaseline(a_vec, b_vec, &c_vec);
+//  for (int i = 0; i < kI; ++i) {
+//    std::memcpy(c[i], c_vec[i].data(), sizeof(float) * kJ);
+//  }
+//}
 
 void GemmSequential(const float a[kI][kK], const float b[kK][kJ],
                     float c[kI][kJ]) {
diff --git a/lab1/lib/gemm.h b/lab1/lib/gemm.h
index b4e732d..7181692 100644
--- a/lab1/lib/gemm.h
+++ b/lab1/lib/gemm.h
@@ -8,8 +8,8 @@ const int kI = kN;
 const int kJ = kN;
 const int kK = kN;
 
-void GemmBaseline(const float a[kI][kK], const float b[kK][kJ],
-                  float c[kI][kJ]);
+//void GemmBaseline(const float a[kI][kK], const float b[kK][kJ],
+//                  float c[kI][kJ]);
 void GemmSequential(const float a[kI][kK], const float b[kK][kJ],
                     float c[kI][kJ]);
 void GemmParallel(const float a[kI][kK], const float b[kK][kJ],
diff --git a/lab1/lib/main.cpp b/lab1/lib/main.cpp
index 9ccfd39..c9cbc3f 100644
--- a/lab1/lib/main.cpp
+++ b/lab1/lib/main.cpp
@@ -31,16 +31,16 @@ int main(int argc, char** argv) {
 
   Init(a, b);
 
-  GemmBaseline(a, b, c_base);
+  GemmSequential(a, b, c_base);
 
-  if (sequential) {
-    clog << "\nRun sequential GEMM\n";
-    Benchmark(&GemmSequential, a, b, c);
-    if (Diff(c_base, c) != 0) {
-      clog << "Baseline failed\n";
-      return 2;
-    }
-  }
+//  if (sequential) {
+//    clog << "\nRun sequential GEMM\n";
+//    Benchmark(&GemmSequential, a, b, c);
+//    if (Diff(c_base, c) != 0) {
+//      clog << "Baseline failed\n";
+//      return 2;
+//    }
+//  }
 
   bool fail = false;
   if (parallel) {
